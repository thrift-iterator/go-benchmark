// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: media.proto

/*
	Package protobuf is a generated protocol buffer package.

	It is generated from these files:
		media.proto

	It has these top-level messages:
		Image
		Media
		MediaContent
*/
package protobuf

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Image_Size int32

const (
	Image_SMALL Image_Size = 0
	Image_LARGE Image_Size = 1
)

var Image_Size_name = map[int32]string{
	0: "SMALL",
	1: "LARGE",
}
var Image_Size_value = map[string]int32{
	"SMALL": 0,
	"LARGE": 1,
}

func (x Image_Size) Enum() *Image_Size {
	p := new(Image_Size)
	*p = x
	return p
}
func (x Image_Size) String() string {
	return proto.EnumName(Image_Size_name, int32(x))
}
func (x *Image_Size) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Image_Size_value, data, "Image_Size")
	if err != nil {
		return err
	}
	*x = Image_Size(value)
	return nil
}
func (Image_Size) EnumDescriptor() ([]byte, []int) { return fileDescriptorMedia, []int{0, 0} }

type Media_Player int32

const (
	Media_JAVA  Media_Player = 0
	Media_FLASH Media_Player = 1
)

var Media_Player_name = map[int32]string{
	0: "JAVA",
	1: "FLASH",
}
var Media_Player_value = map[string]int32{
	"JAVA":  0,
	"FLASH": 1,
}

func (x Media_Player) Enum() *Media_Player {
	p := new(Media_Player)
	*p = x
	return p
}
func (x Media_Player) String() string {
	return proto.EnumName(Media_Player_name, int32(x))
}
func (x *Media_Player) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Media_Player_value, data, "Media_Player")
	if err != nil {
		return err
	}
	*x = Media_Player(value)
	return nil
}
func (Media_Player) EnumDescriptor() ([]byte, []int) { return fileDescriptorMedia, []int{1, 0} }

type Image struct {
	Uri              *string     `protobuf:"bytes,1,req,name=uri" json:"uri,omitempty"`
	Title            *string     `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Width            *int32      `protobuf:"varint,3,req,name=width" json:"width,omitempty"`
	Height           *int32      `protobuf:"varint,4,req,name=height" json:"height,omitempty"`
	Size_            *Image_Size `protobuf:"varint,5,req,name=size,enum=protobuf.Image_Size" json:"size,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *Image) Reset()                    { *m = Image{} }
func (m *Image) String() string            { return proto.CompactTextString(m) }
func (*Image) ProtoMessage()               {}
func (*Image) Descriptor() ([]byte, []int) { return fileDescriptorMedia, []int{0} }

func (m *Image) GetUri() string {
	if m != nil && m.Uri != nil {
		return *m.Uri
	}
	return ""
}

func (m *Image) GetTitle() string {
	if m != nil && m.Title != nil {
		return *m.Title
	}
	return ""
}

func (m *Image) GetWidth() int32 {
	if m != nil && m.Width != nil {
		return *m.Width
	}
	return 0
}

func (m *Image) GetHeight() int32 {
	if m != nil && m.Height != nil {
		return *m.Height
	}
	return 0
}

func (m *Image) GetSize_() Image_Size {
	if m != nil && m.Size_ != nil {
		return *m.Size_
	}
	return Image_SMALL
}

type Media struct {
	Uri              *string       `protobuf:"bytes,1,req,name=uri" json:"uri,omitempty"`
	Title            *string       `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Width            *int32        `protobuf:"varint,3,req,name=width" json:"width,omitempty"`
	Height           *int32        `protobuf:"varint,4,req,name=height" json:"height,omitempty"`
	Format           *string       `protobuf:"bytes,5,req,name=format" json:"format,omitempty"`
	Duration         *int64        `protobuf:"varint,6,req,name=duration" json:"duration,omitempty"`
	Size_            *int64        `protobuf:"varint,7,req,name=size" json:"size,omitempty"`
	Bitrate          *int32        `protobuf:"varint,8,opt,name=bitrate" json:"bitrate,omitempty"`
	Person           []string      `protobuf:"bytes,9,rep,name=person" json:"person,omitempty"`
	Player           *Media_Player `protobuf:"varint,10,req,name=player,enum=protobuf.Media_Player" json:"player,omitempty"`
	Copyright        *string       `protobuf:"bytes,11,opt,name=copyright" json:"copyright,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *Media) Reset()                    { *m = Media{} }
func (m *Media) String() string            { return proto.CompactTextString(m) }
func (*Media) ProtoMessage()               {}
func (*Media) Descriptor() ([]byte, []int) { return fileDescriptorMedia, []int{1} }

func (m *Media) GetUri() string {
	if m != nil && m.Uri != nil {
		return *m.Uri
	}
	return ""
}

func (m *Media) GetTitle() string {
	if m != nil && m.Title != nil {
		return *m.Title
	}
	return ""
}

func (m *Media) GetWidth() int32 {
	if m != nil && m.Width != nil {
		return *m.Width
	}
	return 0
}

func (m *Media) GetHeight() int32 {
	if m != nil && m.Height != nil {
		return *m.Height
	}
	return 0
}

func (m *Media) GetFormat() string {
	if m != nil && m.Format != nil {
		return *m.Format
	}
	return ""
}

func (m *Media) GetDuration() int64 {
	if m != nil && m.Duration != nil {
		return *m.Duration
	}
	return 0
}

func (m *Media) GetSize_() int64 {
	if m != nil && m.Size_ != nil {
		return *m.Size_
	}
	return 0
}

func (m *Media) GetBitrate() int32 {
	if m != nil && m.Bitrate != nil {
		return *m.Bitrate
	}
	return 0
}

func (m *Media) GetPerson() []string {
	if m != nil {
		return m.Person
	}
	return nil
}

func (m *Media) GetPlayer() Media_Player {
	if m != nil && m.Player != nil {
		return *m.Player
	}
	return Media_JAVA
}

func (m *Media) GetCopyright() string {
	if m != nil && m.Copyright != nil {
		return *m.Copyright
	}
	return ""
}

type MediaContent struct {
	Image            []*Image `protobuf:"bytes,1,rep,name=image" json:"image,omitempty"`
	Media            *Media   `protobuf:"bytes,2,req,name=media" json:"media,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *MediaContent) Reset()                    { *m = MediaContent{} }
func (m *MediaContent) String() string            { return proto.CompactTextString(m) }
func (*MediaContent) ProtoMessage()               {}
func (*MediaContent) Descriptor() ([]byte, []int) { return fileDescriptorMedia, []int{2} }

func (m *MediaContent) GetImage() []*Image {
	if m != nil {
		return m.Image
	}
	return nil
}

func (m *MediaContent) GetMedia() *Media {
	if m != nil {
		return m.Media
	}
	return nil
}

func init() {
	proto.RegisterType((*Image)(nil), "protobuf.Image")
	proto.RegisterType((*Media)(nil), "protobuf.Media")
	proto.RegisterType((*MediaContent)(nil), "protobuf.MediaContent")
	proto.RegisterEnum("protobuf.Image_Size", Image_Size_name, Image_Size_value)
	proto.RegisterEnum("protobuf.Media_Player", Media_Player_name, Media_Player_value)
}
func (m *Image) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Image) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uri == nil {
		return 0, proto.NewRequiredNotSetError("uri")
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMedia(dAtA, i, uint64(len(*m.Uri)))
		i += copy(dAtA[i:], *m.Uri)
	}
	if m.Title != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMedia(dAtA, i, uint64(len(*m.Title)))
		i += copy(dAtA[i:], *m.Title)
	}
	if m.Width == nil {
		return 0, proto.NewRequiredNotSetError("width")
	} else {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMedia(dAtA, i, uint64(*m.Width))
	}
	if m.Height == nil {
		return 0, proto.NewRequiredNotSetError("height")
	} else {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMedia(dAtA, i, uint64(*m.Height))
	}
	if m.Size_ == nil {
		return 0, proto.NewRequiredNotSetError("size")
	} else {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMedia(dAtA, i, uint64(*m.Size_))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Media) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Media) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uri == nil {
		return 0, proto.NewRequiredNotSetError("uri")
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMedia(dAtA, i, uint64(len(*m.Uri)))
		i += copy(dAtA[i:], *m.Uri)
	}
	if m.Title != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMedia(dAtA, i, uint64(len(*m.Title)))
		i += copy(dAtA[i:], *m.Title)
	}
	if m.Width == nil {
		return 0, proto.NewRequiredNotSetError("width")
	} else {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMedia(dAtA, i, uint64(*m.Width))
	}
	if m.Height == nil {
		return 0, proto.NewRequiredNotSetError("height")
	} else {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMedia(dAtA, i, uint64(*m.Height))
	}
	if m.Format == nil {
		return 0, proto.NewRequiredNotSetError("format")
	} else {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintMedia(dAtA, i, uint64(len(*m.Format)))
		i += copy(dAtA[i:], *m.Format)
	}
	if m.Duration == nil {
		return 0, proto.NewRequiredNotSetError("duration")
	} else {
		dAtA[i] = 0x30
		i++
		i = encodeVarintMedia(dAtA, i, uint64(*m.Duration))
	}
	if m.Size_ == nil {
		return 0, proto.NewRequiredNotSetError("size")
	} else {
		dAtA[i] = 0x38
		i++
		i = encodeVarintMedia(dAtA, i, uint64(*m.Size_))
	}
	if m.Bitrate != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintMedia(dAtA, i, uint64(*m.Bitrate))
	}
	if len(m.Person) > 0 {
		for _, s := range m.Person {
			dAtA[i] = 0x4a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.Player == nil {
		return 0, proto.NewRequiredNotSetError("player")
	} else {
		dAtA[i] = 0x50
		i++
		i = encodeVarintMedia(dAtA, i, uint64(*m.Player))
	}
	if m.Copyright != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintMedia(dAtA, i, uint64(len(*m.Copyright)))
		i += copy(dAtA[i:], *m.Copyright)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *MediaContent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MediaContent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Image) > 0 {
		for _, msg := range m.Image {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMedia(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Media == nil {
		return 0, proto.NewRequiredNotSetError("media")
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMedia(dAtA, i, uint64(m.Media.Size()))
		n1, err := m.Media.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintMedia(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Image) Size() (n int) {
	var l int
	_ = l
	if m.Uri != nil {
		l = len(*m.Uri)
		n += 1 + l + sovMedia(uint64(l))
	}
	if m.Title != nil {
		l = len(*m.Title)
		n += 1 + l + sovMedia(uint64(l))
	}
	if m.Width != nil {
		n += 1 + sovMedia(uint64(*m.Width))
	}
	if m.Height != nil {
		n += 1 + sovMedia(uint64(*m.Height))
	}
	if m.Size_ != nil {
		n += 1 + sovMedia(uint64(*m.Size_))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Media) Size() (n int) {
	var l int
	_ = l
	if m.Uri != nil {
		l = len(*m.Uri)
		n += 1 + l + sovMedia(uint64(l))
	}
	if m.Title != nil {
		l = len(*m.Title)
		n += 1 + l + sovMedia(uint64(l))
	}
	if m.Width != nil {
		n += 1 + sovMedia(uint64(*m.Width))
	}
	if m.Height != nil {
		n += 1 + sovMedia(uint64(*m.Height))
	}
	if m.Format != nil {
		l = len(*m.Format)
		n += 1 + l + sovMedia(uint64(l))
	}
	if m.Duration != nil {
		n += 1 + sovMedia(uint64(*m.Duration))
	}
	if m.Size_ != nil {
		n += 1 + sovMedia(uint64(*m.Size_))
	}
	if m.Bitrate != nil {
		n += 1 + sovMedia(uint64(*m.Bitrate))
	}
	if len(m.Person) > 0 {
		for _, s := range m.Person {
			l = len(s)
			n += 1 + l + sovMedia(uint64(l))
		}
	}
	if m.Player != nil {
		n += 1 + sovMedia(uint64(*m.Player))
	}
	if m.Copyright != nil {
		l = len(*m.Copyright)
		n += 1 + l + sovMedia(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MediaContent) Size() (n int) {
	var l int
	_ = l
	if len(m.Image) > 0 {
		for _, e := range m.Image {
			l = e.Size()
			n += 1 + l + sovMedia(uint64(l))
		}
	}
	if m.Media != nil {
		l = m.Media.Size()
		n += 1 + l + sovMedia(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMedia(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMedia(x uint64) (n int) {
	return sovMedia(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Image) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMedia
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Image: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Image: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMedia
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Uri = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMedia
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Title = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Width", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Width = &v
			hasFields[0] |= uint64(0x00000002)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Height = &v
			hasFields[0] |= uint64(0x00000004)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			var v Image_Size
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (Image_Size(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Size_ = &v
			hasFields[0] |= uint64(0x00000008)
		default:
			iNdEx = preIndex
			skippy, err := skipMedia(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMedia
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return proto.NewRequiredNotSetError("uri")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return proto.NewRequiredNotSetError("width")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return proto.NewRequiredNotSetError("height")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return proto.NewRequiredNotSetError("size")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Media) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMedia
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Media: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Media: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMedia
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Uri = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMedia
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Title = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Width", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Width = &v
			hasFields[0] |= uint64(0x00000002)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Height = &v
			hasFields[0] |= uint64(0x00000004)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Format", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMedia
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Format = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000008)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Duration = &v
			hasFields[0] |= uint64(0x00000010)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Size_ = &v
			hasFields[0] |= uint64(0x00000020)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bitrate", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Bitrate = &v
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Person", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMedia
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Person = append(m.Person, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Player", wireType)
			}
			var v Media_Player
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (Media_Player(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Player = &v
			hasFields[0] |= uint64(0x00000040)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Copyright", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMedia
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Copyright = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMedia(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMedia
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return proto.NewRequiredNotSetError("uri")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return proto.NewRequiredNotSetError("width")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return proto.NewRequiredNotSetError("height")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return proto.NewRequiredNotSetError("format")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return proto.NewRequiredNotSetError("duration")
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return proto.NewRequiredNotSetError("size")
	}
	if hasFields[0]&uint64(0x00000040) == 0 {
		return proto.NewRequiredNotSetError("player")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MediaContent) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMedia
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MediaContent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MediaContent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMedia
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = append(m.Image, &Image{})
			if err := m.Image[len(m.Image)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Media", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMedia
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Media == nil {
				m.Media = &Media{}
			}
			if err := m.Media.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipMedia(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMedia
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return proto.NewRequiredNotSetError("media")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMedia(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMedia
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMedia
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMedia
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMedia(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMedia = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMedia   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("media.proto", fileDescriptorMedia) }

var fileDescriptorMedia = []byte{
	// 374 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x92, 0xd1, 0x0a, 0xd3, 0x30,
	0x14, 0x86, 0x4d, 0xda, 0x74, 0xed, 0x99, 0xcc, 0x12, 0xc6, 0x08, 0x32, 0x47, 0x28, 0x08, 0xb9,
	0xea, 0xc5, 0xde, 0xa0, 0x8a, 0x3a, 0xa5, 0x03, 0xc9, 0xc0, 0x2b, 0x6f, 0x3a, 0x97, 0x6d, 0x81,
	0xad, 0x2d, 0x59, 0x86, 0x6c, 0xef, 0xe3, 0x9b, 0x78, 0xe1, 0xa5, 0x8f, 0x20, 0x7b, 0x12, 0x49,
	0xda, 0x39, 0xf4, 0xde, 0xab, 0x9e, 0xef, 0x9c, 0x9f, 0xfc, 0xf9, 0x4f, 0x0a, 0xc3, 0xa3, 0xda,
	0xe8, 0x2a, 0x6f, 0x4d, 0x63, 0x1b, 0x1a, 0xfb, 0xcf, 0xfa, 0xbc, 0xcd, 0xbe, 0x21, 0x20, 0xef,
	0x8f, 0xd5, 0x4e, 0xd1, 0x14, 0x82, 0xb3, 0xd1, 0x0c, 0x71, 0x2c, 0x12, 0xe9, 0x4a, 0x3a, 0x06,
	0x62, 0xb5, 0x3d, 0x28, 0x86, 0x39, 0x12, 0x89, 0xec, 0xc0, 0x75, 0xbf, 0xea, 0x8d, 0xdd, 0xb3,
	0x80, 0x63, 0x41, 0x64, 0x07, 0x74, 0x02, 0xd1, 0x5e, 0xe9, 0xdd, 0xde, 0xb2, 0xd0, 0xb7, 0x7b,
	0xa2, 0x02, 0xc2, 0x93, 0xbe, 0x2a, 0x46, 0x38, 0x16, 0xa3, 0xf9, 0x38, 0xbf, 0x1b, 0xe7, 0xde,
	0x34, 0x5f, 0xe9, 0xab, 0x92, 0x5e, 0x91, 0x4d, 0x21, 0x74, 0x44, 0x13, 0x20, 0xab, 0x65, 0x51,
	0x96, 0xe9, 0x13, 0x57, 0x96, 0x85, 0x7c, 0xf7, 0x26, 0x45, 0xd9, 0x77, 0x0c, 0x64, 0xe9, 0x12,
	0xfc, 0xa7, 0x7b, 0x4e, 0x20, 0xda, 0x36, 0xe6, 0x58, 0x59, 0x7f, 0xd3, 0x44, 0xf6, 0x44, 0x9f,
	0x43, 0xbc, 0x39, 0x9b, 0xca, 0xea, 0xa6, 0x66, 0x11, 0xc7, 0x22, 0x90, 0x7f, 0x98, 0xd2, 0x3e,
	0xdb, 0xc0, 0xf7, 0x7d, 0x4d, 0x19, 0x0c, 0xd6, 0xda, 0x9a, 0xca, 0x2a, 0x16, 0x73, 0x24, 0x88,
	0xbc, 0xa3, 0x73, 0x68, 0x95, 0x39, 0x35, 0x35, 0x4b, 0x78, 0xe0, 0x1c, 0x3a, 0xa2, 0x39, 0x44,
	0xed, 0xa1, 0xba, 0x28, 0xc3, 0xc0, 0xef, 0x68, 0xf2, 0xd8, 0x91, 0x0f, 0x9c, 0x7f, 0xf4, 0x53,
	0xd9, 0xab, 0xe8, 0x14, 0x92, 0x2f, 0x4d, 0x7b, 0x31, 0x3e, 0xc4, 0xd0, 0x27, 0x7e, 0x34, 0xb2,
	0x17, 0x10, 0x75, 0x7a, 0x1a, 0x43, 0xf8, 0xa1, 0xf8, 0x54, 0x74, 0x6b, 0x7c, 0x5b, 0x16, 0xab,
	0x45, 0x8a, 0xb2, 0xcf, 0xf0, 0xd4, 0x1f, 0xfa, 0xba, 0xa9, 0xad, 0xaa, 0x2d, 0x7d, 0x09, 0x44,
	0xbb, 0x87, 0x60, 0x88, 0x07, 0x62, 0x38, 0x7f, 0xf6, 0xcf, 0xfb, 0xc8, 0x6e, 0xea, 0x64, 0xfe,
	0xf7, 0x61, 0x98, 0xe3, 0xbf, 0x65, 0xfe, 0x34, 0xd9, 0x4d, 0x5f, 0x8d, 0x7e, 0xdc, 0x66, 0xe8,
	0xe7, 0x6d, 0x86, 0x7e, 0xdd, 0x66, 0x68, 0x81, 0x7e, 0x07, 0x00, 0x00, 0xff, 0xff, 0xf0, 0xc4,
	0xf9, 0x47, 0x74, 0x02, 0x00, 0x00,
}
