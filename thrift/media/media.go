// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package media

import (
	"bytes"
	"reflect"
	"database/sql/driver"
	"errors"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

type Size int64
const (
  Size_SMALL Size = 0
  Size_LARGE Size = 1
)

func (p Size) String() string {
  switch p {
  case Size_SMALL: return "SMALL"
  case Size_LARGE: return "LARGE"
  }
  return "<UNSET>"
}

func SizeFromString(s string) (Size, error) {
  switch s {
  case "SMALL": return Size_SMALL, nil 
  case "LARGE": return Size_LARGE, nil 
  }
  return Size(0), fmt.Errorf("not a valid Size string")
}


func SizePtr(v Size) *Size { return &v }

func (p Size) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *Size) UnmarshalText(text []byte) error {
q, err := SizeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *Size) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = Size(v)
return nil
}

func (p * Size) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type Player int64
const (
  Player_JAVA Player = 0
  Player_FLASH Player = 1
)

func (p Player) String() string {
  switch p {
  case Player_JAVA: return "JAVA"
  case Player_FLASH: return "FLASH"
  }
  return "<UNSET>"
}

func PlayerFromString(s string) (Player, error) {
  switch s {
  case "JAVA": return Player_JAVA, nil 
  case "FLASH": return Player_FLASH, nil 
  }
  return Player(0), fmt.Errorf("not a valid Player string")
}


func PlayerPtr(v Player) *Player { return &v }

func (p Player) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *Player) UnmarshalText(text []byte) error {
q, err := PlayerFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *Player) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = Player(v)
return nil
}

func (p * Player) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type Int int32

func IntPtr(v Int) *Int { return &v }

type Long int64

func LongPtr(v Long) *Long { return &v }

// Some comment...
// 
// Attributes:
//  - URI
//  - Title
//  - Width
//  - Height
//  - Size
type Image struct {
  URI string `thrift:"uri,1" db:"uri" json:"uri"`
  Title *string `thrift:"title,2" db:"title" json:"title,omitempty"`
  Width Int `thrift:"width,3,required" db:"width" json:"width"`
  Height Int `thrift:"height,4,required" db:"height" json:"height"`
  Size Size `thrift:"size,5,required" db:"size" json:"size"`
}

func NewImage() *Image {
  return &Image{}
}


func (p *Image) GetURI() string {
  return p.URI
}
var Image_Title_DEFAULT string
func (p *Image) GetTitle() string {
  if !p.IsSetTitle() {
    return Image_Title_DEFAULT
  }
return *p.Title
}

func (p *Image) GetWidth() Int {
  return p.Width
}

func (p *Image) GetHeight() Int {
  return p.Height
}

func (p *Image) GetSize() Size {
  return p.Size
}
func (p *Image) IsSetTitle() bool {
  return p.Title != nil
}

func (p *Image) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetWidth bool = false;
  var issetHeight bool = false;
  var issetSize bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetWidth = true
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetHeight = true
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetSize = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetWidth{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Width is not set"));
  }
  if !issetHeight{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Height is not set"));
  }
  if !issetSize{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Size is not set"));
  }
  return nil
}

func (p *Image)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.URI = v
}
  return nil
}

func (p *Image)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Title = &v
}
  return nil
}

func (p *Image)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := Int(v)
  p.Width = temp
}
  return nil
}

func (p *Image)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := Int(v)
  p.Height = temp
}
  return nil
}

func (p *Image)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := Size(v)
  p.Size = temp
}
  return nil
}

func (p *Image) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Image"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Image) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uri", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uri: ", p), err) }
  if err := oprot.WriteString(string(p.URI)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uri (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uri: ", p), err) }
  return err
}

func (p *Image) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetTitle() {
    if err := oprot.WriteFieldBegin("title", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:title: ", p), err) }
    if err := oprot.WriteString(string(*p.Title)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.title (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:title: ", p), err) }
  }
  return err
}

func (p *Image) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("width", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:width: ", p), err) }
  if err := oprot.WriteI32(int32(p.Width)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.width (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:width: ", p), err) }
  return err
}

func (p *Image) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("height", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:height: ", p), err) }
  if err := oprot.WriteI32(int32(p.Height)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.height (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:height: ", p), err) }
  return err
}

func (p *Image) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("size", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:size: ", p), err) }
  if err := oprot.WriteI32(int32(p.Size)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.size (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:size: ", p), err) }
  return err
}

func (p *Image) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Image(%+v)", *p)
}

// Attributes:
//  - URI
//  - Title
//  - Width
//  - Height
//  - Format
//  - Duration
//  - Size
//  - Bitrate
//  - Person
//  - Player
//  - Copyright
type Media struct {
  URI string `thrift:"uri,1" db:"uri" json:"uri"`
  Title *string `thrift:"title,2" db:"title" json:"title,omitempty"`
  Width Int `thrift:"width,3,required" db:"width" json:"width"`
  Height Int `thrift:"height,4,required" db:"height" json:"height"`
  Format string `thrift:"format,5,required" db:"format" json:"format"`
  Duration Long `thrift:"duration,6,required" db:"duration" json:"duration"`
  Size Long `thrift:"size,7,required" db:"size" json:"size"`
  Bitrate *Int `thrift:"bitrate,8" db:"bitrate" json:"bitrate,omitempty"`
  Person []string `thrift:"person,9,required" db:"person" json:"person"`
  Player Player `thrift:"player,10,required" db:"player" json:"player"`
  Copyright *string `thrift:"copyright,11" db:"copyright" json:"copyright,omitempty"`
}

func NewMedia() *Media {
  return &Media{}
}


func (p *Media) GetURI() string {
  return p.URI
}
var Media_Title_DEFAULT string
func (p *Media) GetTitle() string {
  if !p.IsSetTitle() {
    return Media_Title_DEFAULT
  }
return *p.Title
}

func (p *Media) GetWidth() Int {
  return p.Width
}

func (p *Media) GetHeight() Int {
  return p.Height
}

func (p *Media) GetFormat() string {
  return p.Format
}

func (p *Media) GetDuration() Long {
  return p.Duration
}

func (p *Media) GetSize() Long {
  return p.Size
}
var Media_Bitrate_DEFAULT Int
func (p *Media) GetBitrate() Int {
  if !p.IsSetBitrate() {
    return Media_Bitrate_DEFAULT
  }
return *p.Bitrate
}

func (p *Media) GetPerson() []string {
  return p.Person
}

func (p *Media) GetPlayer() Player {
  return p.Player
}
var Media_Copyright_DEFAULT string
func (p *Media) GetCopyright() string {
  if !p.IsSetCopyright() {
    return Media_Copyright_DEFAULT
  }
return *p.Copyright
}
func (p *Media) IsSetTitle() bool {
  return p.Title != nil
}

func (p *Media) IsSetBitrate() bool {
  return p.Bitrate != nil
}

func (p *Media) IsSetCopyright() bool {
  return p.Copyright != nil
}

func (p *Media) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetWidth bool = false;
  var issetHeight bool = false;
  var issetFormat bool = false;
  var issetDuration bool = false;
  var issetSize bool = false;
  var issetPerson bool = false;
  var issetPlayer bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetWidth = true
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetHeight = true
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetFormat = true
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetDuration = true
    case 7:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetSize = true
    case 8:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetPerson = true
    case 10:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetPlayer = true
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetWidth{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Width is not set"));
  }
  if !issetHeight{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Height is not set"));
  }
  if !issetFormat{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Format is not set"));
  }
  if !issetDuration{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Duration is not set"));
  }
  if !issetSize{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Size is not set"));
  }
  if !issetPerson{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Person is not set"));
  }
  if !issetPlayer{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Player is not set"));
  }
  return nil
}

func (p *Media)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.URI = v
}
  return nil
}

func (p *Media)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Title = &v
}
  return nil
}

func (p *Media)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := Int(v)
  p.Width = temp
}
  return nil
}

func (p *Media)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := Int(v)
  p.Height = temp
}
  return nil
}

func (p *Media)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Format = v
}
  return nil
}

func (p *Media)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  temp := Long(v)
  p.Duration = temp
}
  return nil
}

func (p *Media)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  temp := Long(v)
  p.Size = temp
}
  return nil
}

func (p *Media)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  temp := Int(v)
  p.Bitrate = &temp
}
  return nil
}

func (p *Media)  ReadField9(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Person =  tSlice
  for i := 0; i < size; i ++ {
var _elem0 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem0 = v
}
    p.Person = append(p.Person, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Media)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  temp := Player(v)
  p.Player = temp
}
  return nil
}

func (p *Media)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.Copyright = &v
}
  return nil
}

func (p *Media) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Media"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Media) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uri", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uri: ", p), err) }
  if err := oprot.WriteString(string(p.URI)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uri (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uri: ", p), err) }
  return err
}

func (p *Media) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetTitle() {
    if err := oprot.WriteFieldBegin("title", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:title: ", p), err) }
    if err := oprot.WriteString(string(*p.Title)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.title (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:title: ", p), err) }
  }
  return err
}

func (p *Media) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("width", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:width: ", p), err) }
  if err := oprot.WriteI32(int32(p.Width)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.width (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:width: ", p), err) }
  return err
}

func (p *Media) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("height", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:height: ", p), err) }
  if err := oprot.WriteI32(int32(p.Height)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.height (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:height: ", p), err) }
  return err
}

func (p *Media) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("format", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:format: ", p), err) }
  if err := oprot.WriteString(string(p.Format)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.format (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:format: ", p), err) }
  return err
}

func (p *Media) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("duration", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:duration: ", p), err) }
  if err := oprot.WriteI64(int64(p.Duration)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.duration (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:duration: ", p), err) }
  return err
}

func (p *Media) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("size", thrift.I64, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:size: ", p), err) }
  if err := oprot.WriteI64(int64(p.Size)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.size (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:size: ", p), err) }
  return err
}

func (p *Media) writeField8(oprot thrift.TProtocol) (err error) {
  if p.IsSetBitrate() {
    if err := oprot.WriteFieldBegin("bitrate", thrift.I32, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:bitrate: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Bitrate)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.bitrate (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:bitrate: ", p), err) }
  }
  return err
}

func (p *Media) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("person", thrift.LIST, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:person: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.Person)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Person {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:person: ", p), err) }
  return err
}

func (p *Media) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("player", thrift.I32, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:player: ", p), err) }
  if err := oprot.WriteI32(int32(p.Player)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.player (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:player: ", p), err) }
  return err
}

func (p *Media) writeField11(oprot thrift.TProtocol) (err error) {
  if p.IsSetCopyright() {
    if err := oprot.WriteFieldBegin("copyright", thrift.STRING, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:copyright: ", p), err) }
    if err := oprot.WriteString(string(*p.Copyright)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.copyright (11) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:copyright: ", p), err) }
  }
  return err
}

func (p *Media) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Media(%+v)", *p)
}

// Attributes:
//  - Image
//  - Media
type MediaContent struct {
  Image []*Image `thrift:"image,1,required" db:"image" json:"image"`
  Media *Media `thrift:"media,2,required" db:"media" json:"media"`
}

func NewMediaContent() *MediaContent {
  return &MediaContent{}
}


func (p *MediaContent) GetImage() []*Image {
  return p.Image
}
var MediaContent_Media_DEFAULT *Media
func (p *MediaContent) GetMedia() *Media {
  if !p.IsSetMedia() {
    return MediaContent_Media_DEFAULT
  }
return p.Media
}
func (p *MediaContent) IsSetMedia() bool {
  return p.Media != nil
}

func (p *MediaContent) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetImage bool = false;
  var issetMedia bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetImage = true
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetMedia = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetImage{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Image is not set"));
  }
  if !issetMedia{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Media is not set"));
  }
  return nil
}

func (p *MediaContent)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Image, 0, size)
  p.Image =  tSlice
  for i := 0; i < size; i ++ {
    _elem1 := &Image{}
    if err := _elem1.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem1), err)
    }
    p.Image = append(p.Image, _elem1)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MediaContent)  ReadField2(iprot thrift.TProtocol) error {
  p.Media = &Media{}
  if err := p.Media.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Media), err)
  }
  return nil
}

func (p *MediaContent) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("MediaContent"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MediaContent) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("image", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:image: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Image)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Image {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:image: ", p), err) }
  return err
}

func (p *MediaContent) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("media", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:media: ", p), err) }
  if err := p.Media.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Media), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:media: ", p), err) }
  return err
}

func (p *MediaContent) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MediaContent(%+v)", *p)
}

